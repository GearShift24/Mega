<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>920</x>
      <y>152</y>
      <w>312</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
-nodePointer : IntNode *
--
+getNodeData() : int
+getNodePointer() : IntNode *
+setNodeData(int value) : void
+setNodePointer(IntNode * next) : void

+IntNode() : Constructor
+IntNode(int value) : init
+IntNode(int value, IntNode * nextNode) : constructor

bg=#9993494</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>792</x>
      <y>72</y>
      <w>152</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Class made by Joe Wrigley
2/12/2017
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1224</x>
      <y>224</y>
      <w>208</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>240.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1416</x>
      <y>176</y>
      <w>256</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+IntNodeArray(int size) : constructor
+setAtIndex(int index, int value) : void
+getFromIndex(int index) : int
+getSize() : int
bg=#8993334</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>896</x>
      <y>368</y>
      <w>344</w>
      <h>232</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
-nodePointer : Node&lt;Type&gt; *
--
Constructors
+Node&lt;Type&gt;(): Constructor
+Node&lt;Type&gt;(Type value): Constructor
+Node&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : Constructor



Accessors
+getNodeData() : Type
+getNodePointer() : Node&lt;Type&gt; *
+setNodeData(Type value) : void
+setNodePointer(Node&lt;Type&gt; * next) : void



bg=#8546</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1288</x>
      <y>360</y>
      <w>392</w>
      <h>264</h>
    </coordinates>
    <panel_attributes>Model :: Array&lt;Type&gt;
--
-size : int 
-front : Node&lt;Type&gt; *
--
Constructors:
+ Array&lt;Type&gt;(int size) : Constructor
+Array&lt;Type&gt;();

destructor:
+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied : copyConstructor

Methods/Accessors:
+getSize() const : int
-getFront() const : int

+getFromIndex(int index) : Type
+setAtTindex(int index, Type value) : void
bg=#4252545</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1232</x>
      <y>456</y>
      <w>72</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>896</x>
      <y>128</y>
      <w>792</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>Sample Data Structure
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>872</x>
      <y>336</y>
      <w>832</w>
      <h>344</h>
    </coordinates>
    <panel_attributes>Generic Data Structure
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1352</x>
      <y>728</y>
      <w>464</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1064</x>
      <y>592</y>
      <w>384</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>460.0;170.0;160.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>800</x>
      <y>0</y>
      <w>120</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>Class 
--
Data members
--
Constructors
Method</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>928</x>
      <y>592</y>
      <w>136</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>150.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>728</x>
      <y>704</y>
      <w>592</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>Model :: BiDirectionalNode&lt;Type&gt;
--
-nodeData : Type
-next : BiDirectionalNode&lt;Type&gt; *
-previous : BiDirectionalNode&lt;Type&gt; *
--
+BiDirectionalNode&lt;Type&gt;() : Constructor
+BiDirectionalNode&lt;Type&gt;(Type value) : Constructor
 BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous, BiDirectionalNode&lt;Type&gt; * next);

/methods
+ getBiDirectionalNodeData() : Type
+ getNextPointer() : BiDirectionalNode&lt;Type&gt; *
+ getPreviousPointer() : BiDirectionalNode&lt;Type&gt; *

+  void setNodeData(Type data); : void
+ setNextPointer(BiDirectionalNode&lt;Type&gt; * next) : void
+ setPreviousPointer(BiDirectionalNode&lt;Type&gt; * previous) : void

bg=#654675</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>744</x>
      <y>1008</y>
      <w>464</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>/Model :: DoublyLinkedList&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non virtual Methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+ add(Type value) : void
+ remove(int) : Type


bg=#25253</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>992</x>
      <y>936</y>
      <w>40</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1200</x>
      <y>1240</y>
      <w>88</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1184</x>
      <y>1384</y>
      <w>256</w>
      <h>168</h>
    </coordinates>
    <panel_attributes>Model :: CircularList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt;* 
- end : BiDirectionalNode&lt;Type&gt;* 
- size : int
--
+CircularList() : constructor
+~CircularList() : destructor

+add(Type data) : void
+remove(int index) : Type

+addAtIndex(int index, Type data) : void

bg=red
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>592</x>
      <y>1240</y>
      <w>168</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>190.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>520</x>
      <y>1368</y>
      <w>208</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
-front : BiDirectionalNode&lt;Type&gt;* 
-end : BiDirectionalNode&lt;Type&gt;* 
-size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+add(Type data) : void
+remove(int index) : Type

+enqueue(Type data) : void
+dequeue() : Type
+peek() : Type

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1056</x>
      <y>1240</y>
      <w>48</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>960</x>
      <y>1368</y>
      <w>216</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>Model :: Stacks&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt;* 
- end : BiDirectionalNode&lt;Type&gt;* 
- size: int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>736</x>
      <y>1376</y>
      <w>216</w>
      <h>184</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
front : BiDirectionalNode&lt;Type&gt; *
-end : BiDirectionalNode&lt;Type&gt;* 
-size : int
--
+DoubleList() : Constructor
+~DoubleList() : Destructor

+add(Type data) : void
+remove(int index) : Type

+addFront(Type data) : void
+addEnd(Type data) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>832</x>
      <y>1240</y>
      <w>40</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;170.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>424</x>
      <y>376</y>
      <w>392</w>
      <h>232</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inherited)
- rootPointer : TreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--
+ BinarySearchTreeNode() : constructor
+ BinarySearcTreeNode(Type data) : constructor

+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) :  void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * reight) : void

bg=#585</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>808</x>
      <y>440</y>
      <w>104</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>56</x>
      <y>344</y>
      <w>344</w>
      <h>216</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--
*Informatinoal Methods*
- getSize : int
- getHeight : int
- isComplete : bool
- isBalanced : bool
--
*Traversals*
/+ inOrderTraversal() : void/
/+ preOrderTraversal() : void/
/+ postOrderTraversal() : void/

*Data operations*
/+ insert(Type&gt; : void
/+ contains(Type) : bool
/+ remove(Type) : void

bg=#5854</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>192</x>
      <y>648</y>
      <w>360</w>
      <h>424</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *
--
+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRoot(BinarySearchTreeNode&lt;Type&gt;* root) : void

*Recursive helper methods*
# calculateSize(BinarySearchTreeNode&lt;Type&gt;*) : int
# calculateHeight(BinarySearchTreeNode&lt;Type&gt; * root) : int
# iscomplete(BinarySearchTreeNode&lt;Type&gt; *) : bool
# isBalanced(BinarysearchTreeNode&lt;Type&gt; *) : bool

# removeNode(BinarySerachTreeNode&lt;Type&gt; *)  : void

# inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
# postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void

*Informational*
+ getSize() : int
+ getHeight() : int
+ isBalanced() : bool
+ isComplete() : bool

*Traversal*
+ inOrderTraversal() : void
+ preOrderTraversal() : void
+ postOrderTraverwsal() : void

*Data operations*
+ insert(Type) : void
+ contains(Type) : bool
+ remove(Type) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>464</x>
      <y>600</y>
      <w>104</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>248</x>
      <y>552</y>
      <w>40</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
</diagram>
