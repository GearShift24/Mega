<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>6</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>744</x>
      <y>132</y>
      <w>234</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>IntNode
--
- nodeData : int
-nodePointer : IntNode *
--
+getNodeData() : int
+getNodePointer() : IntNode *
+setNodeData(int value) : void
+setNodePointer(IntNode * next) : void

+IntNode() : Constructor
+IntNode(int value) : init
+IntNode(int value, IntNode * nextNode) : constructor

bg=#9993494</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>648</x>
      <y>72</y>
      <w>114</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Class made by Joe Wrigley
2/12/2017
bg=blue</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>972</x>
      <y>186</y>
      <w>156</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>240.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1116</x>
      <y>150</y>
      <w>192</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>IntNodeArray
--
- size : int
- front : IntNode *
--
+IntNodeArray(int size) : constructor
+setAtIndex(int index, int value) : void
+getFromIndex(int index) : int
+getSize() : int
bg=#8993334</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>726</x>
      <y>294</y>
      <w>258</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>Node&lt;Type&gt;
--
-nodeData : Type
-nodePointer : Node&lt;Type&gt; *
--
Constructors
+Node&lt;Type&gt;(): Constructor
+Node&lt;Type&gt;(Type value): Constructor
+Node&lt;Type&gt;(Type value, Node&lt;Type&gt; * next) : Constructor



Accessors
+getNodeData() : Type
+getNodePointer() : Node&lt;Type&gt; *
+setNodeData(Type value) : void
+setNodePointer(Node&lt;Type&gt; * next) : void



bg=#8546</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1020</x>
      <y>288</y>
      <w>294</w>
      <h>198</h>
    </coordinates>
    <panel_attributes>Model :: Array&lt;Type&gt;
--
-size : int 
-front : Node&lt;Type&gt; *
--
Constructors:
+ Array&lt;Type&gt;(int size) : Constructor
+Array&lt;Type&gt;();

destructor:
+ ~Array&lt;Type&gt;() : destructor
+ Array&lt;Type&gt;(const Array&lt;Type&gt; &amp; toBeCopied : copyConstructor

Methods/Accessors:
+getSize() const : int
-getFront() const : int

+getFromIndex(int index) : Type
+setAtTindex(int index, Type value) : void
bg=#4252545</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>978</x>
      <y>360</y>
      <w>54</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>70.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>726</x>
      <y>114</y>
      <w>594</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Sample Data Structure
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>708</x>
      <y>270</y>
      <w>624</w>
      <h>258</h>
    </coordinates>
    <panel_attributes>Generic Data Structure
--
bg=orange</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1068</x>
      <y>564</y>
      <w>348</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Model :: List&lt;Type&gt;
--
- size : int
- front : Node&lt;Type&gt; *
- end : Node&lt;Type&gt; *
--
+ List&lt;Type&gt;() : constructor
+ List&lt;Type&gt;(const List&lt;Type&gt; &amp; source) : copy constructor
+ ~List&lt;Type&gt;() : destructor

+ addAtIndex(int index, Type value) : void
+ add(Type value) : void
+ remove(int index) : Type
+ setAtIndex(int index, Type data) : Type
+ getFromIndex(int index) : Type
+ contains(Type data) : bool
+ getSize() const : int
+ getFront() const : Node&lt;Type&gt; *
+ getEnd() const : Node&lt;Type&gt; *</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>852</x>
      <y>462</y>
      <w>288</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>460.0;170.0;160.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>654</x>
      <y>18</y>
      <w>90</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>Class 
--
Data members
--
Constructors
Method</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>462</y>
      <w>102</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>150.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>546</y>
      <w>444</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Model :: BiDirectionalNode&lt;Type&gt;
--
-nodeData : Type
-next : BiDirectionalNode&lt;Type&gt; *
-previous : BiDirectionalNode&lt;Type&gt; *
--
+BiDirectionalNode&lt;Type&gt;() : Constructor
+BiDirectionalNode&lt;Type&gt;(Type value) : Constructor
 BiDirectionalNode(Type data, BiDirectionalNode&lt;Type&gt; * previous, BiDirectionalNode&lt;Type&gt; * next);

/methods
+ getBiDirectionalNodeData() : Type
+ getNextPointer() : BiDirectionalNode&lt;Type&gt; *
+ getPreviousPointer() : BiDirectionalNode&lt;Type&gt; *

+  void setNodeData(Type data); : void
+ setNextPointer(BiDirectionalNode&lt;Type&gt; * next) : void
+ setPreviousPointer(BiDirectionalNode&lt;Type&gt; * previous) : void

bg=#654675</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>612</x>
      <y>774</y>
      <w>348</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>/Model :: DoublyLinkedList&lt;Type&gt;/
--
- front : BiDirectionalNode&lt;Type&gt; *
- end : BiDirectionalNode&lt;Type&gt; *
- size : int
--
Non virtual Methods
+ getSize() const : int
+ getFront() const : BiDirectionalNode&lt;Type&gt; *
+ getEnd() const : BiDirectionalNode&lt;Type&gt; *

Virtual methods
+ add(Type value) : void
+ remove(int) : Type


bg=#25253</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>798</x>
      <y>720</y>
      <w>30</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=0..n</panel_attributes>
    <additional_attributes>10.0;90.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>954</x>
      <y>948</y>
      <w>66</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;90.0;180.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>942</x>
      <y>1056</y>
      <w>192</w>
      <h>126</h>
    </coordinates>
    <panel_attributes>Model :: CircularList&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt;* 
- end : BiDirectionalNode&lt;Type&gt;* 
- size : int
--
+CircularList() : constructor
+~CircularList() : destructor

+add(Type data) : void
+remove(int index) : Type

+addAtIndex(int index, Type data) : void

bg=red
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>498</x>
      <y>948</y>
      <w>126</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>190.0;10.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>444</x>
      <y>1044</y>
      <w>156</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Model :: Queue&lt;Type&gt;
--
-front : BiDirectionalNode&lt;Type&gt;* 
-end : BiDirectionalNode&lt;Type&gt;* 
-size : int
--
+ Queue() : constructor
+ ~Queue() : destructor

+add(Type data) : void
+remove(int index) : Type

+enqueue(Type data) : void
+dequeue() : Type
+peek() : Type

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>846</x>
      <y>948</y>
      <w>36</w>
      <h>108</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;40.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>774</x>
      <y>1044</y>
      <w>162</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>Model :: Stacks&lt;Type&gt;
--
- front : BiDirectionalNode&lt;Type&gt;* 
- end : BiDirectionalNode&lt;Type&gt;* 
- size: int
--
+ Stack() : constructor
+ ~Stack() : destructor

+ push(Type data) : void
+ pop() : Type
+ peek() : Type

+ add(Type data) : void
+ remove(int index) : Type

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>606</x>
      <y>1050</y>
      <w>162</w>
      <h>138</h>
    </coordinates>
    <panel_attributes>Model :: DoubleList&lt;Type&gt;
--
front : BiDirectionalNode&lt;Type&gt; *
-end : BiDirectionalNode&lt;Type&gt;* 
-size : int
--
+DoubleList() : Constructor
+~DoubleList() : Destructor

+add(Type data) : void
+remove(int index) : Type

+addFront(Type data) : void
+addEnd(Type data) : void

bg=red</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>678</x>
      <y>948</y>
      <w>30</w>
      <h>114</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>30.0;10.0;10.0;170.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>372</x>
      <y>300</y>
      <w>294</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>BinarySearchTreeNode&lt;Type&gt;
--
- nodeData : Type (inherited)
- rootPointer : TreeNode&lt;Type&gt; *
- leftChildPointer : BinarySearchTreeNode&lt;Type&gt; *
- rightChildPointer : BinarySearchTreeNode&lt;Type&gt; *
--
+ getRootPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getLeftChildPointer() : BinarySearchTreeNode&lt;Type&gt; *
+ getRightChildPointer() : BinarySearchTreeNode&lt;Type&gt; *

+ setRootChildPointer(BinarySearchTreeNode&lt;Type&gt; * root) :  void
+ setLeftChildPointer(BinarySearchTreeNode&lt;Type&gt; * left) : void
+ setRightChildPointer(BinarySearchTreeNode&lt;Type&gt; * reight) : void

bg=#585</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>660</x>
      <y>348</y>
      <w>78</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>96</x>
      <y>276</y>
      <w>258</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>Model :: Tree&lt;Type&gt;
--

- size : int
- height : int
- complete : bool
- balanced : bool
--

+ getSize() : int
+ getHeight() : int
+ isComplete() : bool
+ isBalanced() : bool

+ setSize(int size) : void
+ setHeight(int height) : void
+ setComplete(bool complete) : void
+ setBalanced(bool balanced) : void

/+ inOrderTraversal() : void/
/+ preOrderTraversal() : void/
/+ postOrderTraversal() : void/
bg=#5854</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>198</x>
      <y>504</y>
      <w>258</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>Model :: BinarySearchTree&lt;Type&gt;
--
- root : BinarySearchTreeNode&lt;Type&gt; *
- size : int (inherited)
- height : int (inherited)
- compelte : bool (inherited)
- balanced : bool (inherited)
--

+ getRoot() : BinarySearchTreeNode&lt;Type&gt; *
+ setRootBinarySearchTreeNode&lt;Type&gt;* root) : void

+ calculateSize(BinarySearchTreeNode&lt;Type&gt;*) : int

+ inOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
+ preOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void
+ postOrderTraversal(BinarySearchTreeNode&lt;Type&gt; *) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>402</x>
      <y>438</y>
      <w>78</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>110.0;10.0;10.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>240</x>
      <y>462</y>
      <w>30</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m2=1..n</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
</diagram>
